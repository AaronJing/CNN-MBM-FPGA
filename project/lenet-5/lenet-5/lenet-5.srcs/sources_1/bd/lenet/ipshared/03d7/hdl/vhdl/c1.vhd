-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity c1 is
generic (
    C_S_AXI_CRTL_BUS_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CRTL_BUS_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_KERNEL_BUS_ADDR_WIDTH : INTEGER := 9;
    C_S_AXI_KERNEL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    input_image_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_image_TVALID : IN STD_LOGIC;
    input_image_TREADY : OUT STD_LOGIC;
    input_image_TLAST : IN STD_LOGIC;
    output_r_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_r_TVALID : OUT STD_LOGIC;
    output_r_TREADY : IN STD_LOGIC;
    output_r_TLAST : OUT STD_LOGIC;
    s_axi_CRTL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CRTL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CRTL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC;
    s_axi_KERNEL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_KERNEL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_KERNEL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_KERNEL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_KERNEL_BUS_WVALID : IN STD_LOGIC;
    s_axi_KERNEL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_KERNEL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_KERNEL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_KERNEL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_KERNEL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_KERNEL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_KERNEL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_KERNEL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_KERNEL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_KERNEL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_KERNEL_BUS_RREADY : IN STD_LOGIC;
    s_axi_KERNEL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_KERNEL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_KERNEL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_KERNEL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_KERNEL_BUS_BREADY : IN STD_LOGIC;
    s_axi_KERNEL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of c1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "c1,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=15.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=12.382800,HLS_SYN_LAT=4033,HLS_SYN_TPT=none,HLS_SYN_MEM=7,HLS_SYN_DSP=11,HLS_SYN_FF=3932,HLS_SYN_LUT=4192}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (52 downto 0) := "00000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (52 downto 0) := "00000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (52 downto 0) := "00000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (52 downto 0) := "00000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (52 downto 0) := "00000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (52 downto 0) := "00000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (52 downto 0) := "00001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (52 downto 0) := "00010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (52 downto 0) := "00100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (52 downto 0) := "01000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (52 downto 0) := "10000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_C0000000 : STD_LOGIC_VECTOR (31 downto 0) := "11000000000000000000000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_40000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal input_image_data_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal input_image_data_0_vld_in : STD_LOGIC;
    signal input_image_data_0_vld_out : STD_LOGIC;
    signal input_image_data_0_ack_in : STD_LOGIC;
    signal input_image_data_0_ack_out : STD_LOGIC;
    signal input_image_data_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal input_image_data_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal input_image_data_0_sel_rd : STD_LOGIC := '0';
    signal input_image_data_0_sel_wr : STD_LOGIC := '0';
    signal input_image_data_0_sel : STD_LOGIC;
    signal input_image_data_0_load_A : STD_LOGIC;
    signal input_image_data_0_load_B : STD_LOGIC;
    signal input_image_data_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_image_data_0_state_cmp_full : STD_LOGIC;
    signal input_image_last_0_vld_in : STD_LOGIC;
    signal input_image_last_0_ack_out : STD_LOGIC;
    signal input_image_last_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal filter_w_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal filter_w_ce0 : STD_LOGIC;
    signal filter_w_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal filter_b_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal filter_b_ce0 : STD_LOGIC;
    signal filter_b_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_data_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal output_data_1_vld_in : STD_LOGIC;
    signal output_data_1_vld_out : STD_LOGIC;
    signal output_data_1_ack_in : STD_LOGIC;
    signal output_data_1_ack_out : STD_LOGIC;
    signal output_data_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal output_data_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal output_data_1_sel_rd : STD_LOGIC := '0';
    signal output_data_1_sel_wr : STD_LOGIC := '0';
    signal output_data_1_sel : STD_LOGIC;
    signal output_data_1_load_A : STD_LOGIC;
    signal output_data_1_load_B : STD_LOGIC;
    signal output_data_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_data_1_state_cmp_full : STD_LOGIC;
    signal output_last_1_data_out : STD_LOGIC;
    signal output_last_1_vld_in : STD_LOGIC;
    signal output_last_1_vld_out : STD_LOGIC;
    signal output_last_1_ack_in : STD_LOGIC;
    signal output_last_1_ack_out : STD_LOGIC;
    signal output_last_1_payload_A : STD_LOGIC;
    signal output_last_1_payload_B : STD_LOGIC;
    signal output_last_1_sel_rd : STD_LOGIC := '0';
    signal output_last_1_sel_wr : STD_LOGIC := '0';
    signal output_last_1_sel : STD_LOGIC;
    signal output_last_1_load_A : STD_LOGIC;
    signal output_last_1_load_B : STD_LOGIC;
    signal output_last_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_last_1_state_cmp_full : STD_LOGIC;
    signal input_image_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal output_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal grp_fu_356_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_366 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal grp_fu_348_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_372 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal reg_379 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal tmp_19_cast_fu_393_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_19_cast_reg_743 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal row_1_fu_403_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal row_1_reg_751 : STD_LOGIC_VECTOR (2 downto 0);
    signal input_image_bram_add_reg_756 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal col_1_fu_429_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal col_1_reg_764 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_21_cast_fu_467_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_21_cast_reg_769 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal kernel_1_fu_477_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal kernel_1_reg_777 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond7_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal filter_b_load_reg_787 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_27_fu_498_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_27_reg_792 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal input_row_1_fu_510_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal input_row_1_reg_800 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_out_addr_1_reg_805 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal input_col_1_fu_536_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal input_col_1_reg_813 : STD_LOGIC_VECTOR (1 downto 0);
    signal kernel_row_1_fu_548_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal kernel_row_1_reg_821 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_44_cast_fu_560_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_44_cast_reg_826 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond4_fu_542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_fu_564_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_38_reg_831 : STD_LOGIC_VECTOR (1 downto 0);
    signal kernel_col_1_fu_576_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal kernel_col_1_reg_839 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal exitcond3_fu_570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal filter_w_load_reg_854 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal input_image_bram_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_image_bram_loa_reg_859 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_cast_fu_640_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_24_cast_reg_864 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_block_state22 : BOOLEAN;
    signal kernel_2_fu_650_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal kernel_2_reg_872 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_656_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_877 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_fu_644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_fu_677_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_30_reg_882 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal row_2_fu_689_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal row_2_reg_890 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_32_fu_695_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_reg_895 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_fu_683_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal col_2_fu_721_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal col_2_reg_908 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_cond1_fu_738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond1_reg_913 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_715_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv_out_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_out_load_reg_918 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_exp_generic_float_s_fu_339_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_i_reg_923 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal grp_fu_361_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_image_bram_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal input_image_bram_ce0 : STD_LOGIC;
    signal input_image_bram_we0 : STD_LOGIC;
    signal conv_out_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal conv_out_ce0 : STD_LOGIC;
    signal conv_out_we0 : STD_LOGIC;
    signal grp_exp_generic_float_s_fu_339_ap_start : STD_LOGIC;
    signal grp_exp_generic_float_s_fu_339_ap_done : STD_LOGIC;
    signal grp_exp_generic_float_s_fu_339_ap_idle : STD_LOGIC;
    signal grp_exp_generic_float_s_fu_339_ap_ready : STD_LOGIC;
    signal row_reg_202 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond8_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_reg_213 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond9_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal kernel_reg_224 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond6_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_row_reg_236 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond5_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_col_reg_248 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal kernel_row_reg_260 : STD_LOGIC_VECTOR (1 downto 0);
    signal temp_reg_271 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_col_reg_283 : STD_LOGIC_VECTOR (1 downto 0);
    signal temp_1_reg_294 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel1_reg_306 : STD_LOGIC_VECTOR (2 downto 0);
    signal row2_reg_317 : STD_LOGIC_VECTOR (1 downto 0);
    signal col3_reg_328 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_grp_exp_generic_float_s_fu_339_ap_start : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (52 downto 0);
    signal ap_NS_fsm_state28 : STD_LOGIC;
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal tmp_22_cast_fu_418_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_cast_fu_440_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_cast_fu_525_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum4_cast_fu_595_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_fu_613_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_41_cast_fu_710_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_348_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_348_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal grp_fu_356_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_356_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal tmp_fu_385_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal col_cast_cast_fu_409_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_22_fu_413_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_20_fu_449_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_cast_fu_457_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernel_cast_cast_fu_445_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_21_fu_461_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal input_row_cast8_cast_fu_483_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_25_fu_487_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_45_fu_492_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal input_col_cast7_cast_fu_516_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_31_fu_520_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_47_fu_554_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp1_fu_582_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum4_fu_590_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_39_fu_600_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_41_fu_606_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_23_fu_622_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl2_cast_fu_630_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernel1_cast5_cast_fu_618_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_24_fu_634_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal row2_cast4_cast_fu_662_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_28_fu_666_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_46_fu_671_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal col3_cast3_cast_fu_701_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_37_fu_705_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_35_fu_727_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_733_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_361_ce : STD_LOGIC;
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";

    component exp_generic_float_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component c1_fadd_32ns_32nsfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component c1_fmul_32ns_32nsg8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component c1_fdiv_32ns_32nshbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component c1_input_image_bram IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component c1_conv_out IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component c1_CRTL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component c1_KERNEL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        filter_w_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        filter_w_ce0 : IN STD_LOGIC;
        filter_w_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        filter_b_address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        filter_b_ce0 : IN STD_LOGIC;
        filter_b_q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    c1_CRTL_BUS_s_axi_U : component c1_CRTL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CRTL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CRTL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CRTL_BUS_AWVALID,
        AWREADY => s_axi_CRTL_BUS_AWREADY,
        AWADDR => s_axi_CRTL_BUS_AWADDR,
        WVALID => s_axi_CRTL_BUS_WVALID,
        WREADY => s_axi_CRTL_BUS_WREADY,
        WDATA => s_axi_CRTL_BUS_WDATA,
        WSTRB => s_axi_CRTL_BUS_WSTRB,
        ARVALID => s_axi_CRTL_BUS_ARVALID,
        ARREADY => s_axi_CRTL_BUS_ARREADY,
        ARADDR => s_axi_CRTL_BUS_ARADDR,
        RVALID => s_axi_CRTL_BUS_RVALID,
        RREADY => s_axi_CRTL_BUS_RREADY,
        RDATA => s_axi_CRTL_BUS_RDATA,
        RRESP => s_axi_CRTL_BUS_RRESP,
        BVALID => s_axi_CRTL_BUS_BVALID,
        BREADY => s_axi_CRTL_BUS_BREADY,
        BRESP => s_axi_CRTL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    c1_KERNEL_BUS_s_axi_U : component c1_KERNEL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_KERNEL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_KERNEL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_KERNEL_BUS_AWVALID,
        AWREADY => s_axi_KERNEL_BUS_AWREADY,
        AWADDR => s_axi_KERNEL_BUS_AWADDR,
        WVALID => s_axi_KERNEL_BUS_WVALID,
        WREADY => s_axi_KERNEL_BUS_WREADY,
        WDATA => s_axi_KERNEL_BUS_WDATA,
        WSTRB => s_axi_KERNEL_BUS_WSTRB,
        ARVALID => s_axi_KERNEL_BUS_ARVALID,
        ARREADY => s_axi_KERNEL_BUS_ARREADY,
        ARADDR => s_axi_KERNEL_BUS_ARADDR,
        RVALID => s_axi_KERNEL_BUS_RVALID,
        RREADY => s_axi_KERNEL_BUS_RREADY,
        RDATA => s_axi_KERNEL_BUS_RDATA,
        RRESP => s_axi_KERNEL_BUS_RRESP,
        BVALID => s_axi_KERNEL_BUS_BVALID,
        BREADY => s_axi_KERNEL_BUS_BREADY,
        BRESP => s_axi_KERNEL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        filter_w_address0 => filter_w_address0,
        filter_w_ce0 => filter_w_ce0,
        filter_w_q0 => filter_w_q0,
        filter_b_address0 => filter_b_address0,
        filter_b_ce0 => filter_b_ce0,
        filter_b_q0 => filter_b_q0);

    input_image_bram_U : component c1_input_image_bram
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => input_image_bram_address0,
        ce0 => input_image_bram_ce0,
        we0 => input_image_bram_we0,
        d0 => input_image_data_0_data_out,
        q0 => input_image_bram_q0);

    conv_out_U : component c1_conv_out
    generic map (
        DataWidth => 32,
        AddressRange => 54,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => conv_out_address0,
        ce0 => conv_out_ce0,
        we0 => conv_out_we0,
        d0 => reg_379,
        q0 => conv_out_q0);

    grp_exp_generic_float_s_fu_339 : component exp_generic_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_exp_generic_float_s_fu_339_ap_start,
        ap_done => grp_exp_generic_float_s_fu_339_ap_done,
        ap_idle => grp_exp_generic_float_s_fu_339_ap_idle,
        ap_ready => grp_exp_generic_float_s_fu_339_ap_ready,
        x => reg_366,
        ap_return => grp_exp_generic_float_s_fu_339_ap_return);

    c1_fadd_32ns_32nsfYi_U5 : component c1_fadd_32ns_32nsfYi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_348_p0,
        din1 => grp_fu_348_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_348_p2);

    c1_fmul_32ns_32nsg8j_U6 : component c1_fmul_32ns_32nsg8j
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_356_p0,
        din1 => grp_fu_356_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_356_p2);

    c1_fdiv_32ns_32nshbi_U7 : component c1_fdiv_32ns_32nshbi
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_379,
        din1 => reg_372,
        ce => grp_fu_361_ce,
        dout => grp_fu_361_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_exp_generic_float_s_fu_339_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_exp_generic_float_s_fu_339_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_logic_1 = ap_NS_fsm_state28))) then 
                    ap_reg_grp_exp_generic_float_s_fu_339_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_exp_generic_float_s_fu_339_ap_ready)) then 
                    ap_reg_grp_exp_generic_float_s_fu_339_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    input_image_data_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_image_data_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_image_data_0_ack_out) and (ap_const_logic_1 = input_image_data_0_vld_out))) then 
                                        input_image_data_0_sel_rd <= not(input_image_data_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_image_data_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_image_data_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = input_image_data_0_vld_in) and (ap_const_logic_1 = input_image_data_0_ack_in))) then 
                                        input_image_data_0_sel_wr <= not(input_image_data_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_image_data_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_image_data_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = input_image_data_0_vld_in) and (ap_const_logic_1 = input_image_data_0_ack_out) and (input_image_data_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = input_image_data_0_vld_in) and (input_image_data_0_state = ap_const_lv2_2)))) then 
                    input_image_data_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = input_image_data_0_vld_in) and (ap_const_logic_0 = input_image_data_0_ack_out) and (input_image_data_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = input_image_data_0_ack_out) and (input_image_data_0_state = ap_const_lv2_1)))) then 
                    input_image_data_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = input_image_data_0_vld_in) and (input_image_data_0_state = ap_const_lv2_2)) or ((ap_const_logic_1 = input_image_data_0_ack_out) and (input_image_data_0_state = ap_const_lv2_1)) or ((input_image_data_0_state = ap_const_lv2_3) and not(((ap_const_logic_1 = input_image_data_0_vld_in) and (ap_const_logic_0 = input_image_data_0_ack_out))) and not(((ap_const_logic_0 = input_image_data_0_vld_in) and (ap_const_logic_1 = input_image_data_0_ack_out)))))) then 
                    input_image_data_0_state <= ap_const_lv2_3;
                else 
                    input_image_data_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    input_image_last_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_image_last_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = input_image_last_0_vld_in) and (ap_const_logic_1 = input_image_last_0_ack_out) and (ap_const_lv2_3 = input_image_last_0_state)) or ((ap_const_logic_0 = input_image_last_0_vld_in) and (ap_const_lv2_2 = input_image_last_0_state)))) then 
                    input_image_last_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = input_image_last_0_vld_in) and (ap_const_logic_0 = input_image_last_0_ack_out) and (ap_const_lv2_3 = input_image_last_0_state)) or ((ap_const_logic_0 = input_image_last_0_ack_out) and (ap_const_lv2_1 = input_image_last_0_state)))) then 
                    input_image_last_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = input_image_last_0_vld_in) and (ap_const_lv2_2 = input_image_last_0_state)) or ((ap_const_logic_1 = input_image_last_0_ack_out) and (ap_const_lv2_1 = input_image_last_0_state)) or ((ap_const_lv2_3 = input_image_last_0_state) and not(((ap_const_logic_1 = input_image_last_0_vld_in) and (ap_const_logic_0 = input_image_last_0_ack_out))) and not(((ap_const_logic_0 = input_image_last_0_vld_in) and (ap_const_logic_1 = input_image_last_0_ack_out)))))) then 
                    input_image_last_0_state <= ap_const_lv2_3;
                else 
                    input_image_last_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_data_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = output_data_1_ack_out) and (ap_const_logic_1 = output_data_1_vld_out))) then 
                                        output_data_1_sel_rd <= not(output_data_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_data_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = output_data_1_vld_in) and (ap_const_logic_1 = output_data_1_ack_in))) then 
                                        output_data_1_sel_wr <= not(output_data_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    output_data_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = output_data_1_vld_in) and (ap_const_logic_1 = output_data_1_ack_out) and (ap_const_lv2_3 = output_data_1_state)) or ((ap_const_logic_0 = output_data_1_vld_in) and (ap_const_lv2_2 = output_data_1_state)))) then 
                    output_data_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = output_data_1_vld_in) and (ap_const_logic_0 = output_data_1_ack_out) and (ap_const_lv2_3 = output_data_1_state)) or ((ap_const_logic_0 = output_data_1_ack_out) and (ap_const_lv2_1 = output_data_1_state)))) then 
                    output_data_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = output_data_1_vld_in) and (ap_const_lv2_2 = output_data_1_state)) or ((ap_const_logic_1 = output_data_1_ack_out) and (ap_const_lv2_1 = output_data_1_state)) or ((ap_const_lv2_3 = output_data_1_state) and not(((ap_const_logic_1 = output_data_1_vld_in) and (ap_const_logic_0 = output_data_1_ack_out))) and not(((ap_const_logic_0 = output_data_1_vld_in) and (ap_const_logic_1 = output_data_1_ack_out)))))) then 
                    output_data_1_state <= ap_const_lv2_3;
                else 
                    output_data_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_last_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_last_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = output_last_1_ack_out) and (ap_const_logic_1 = output_last_1_vld_out))) then 
                                        output_last_1_sel_rd <= not(output_last_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_last_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_last_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = output_last_1_vld_in) and (ap_const_logic_1 = output_last_1_ack_in))) then 
                                        output_last_1_sel_wr <= not(output_last_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    output_last_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_last_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = output_last_1_vld_in) and (ap_const_logic_1 = output_last_1_ack_out) and (ap_const_lv2_3 = output_last_1_state)) or ((ap_const_logic_0 = output_last_1_vld_in) and (ap_const_lv2_2 = output_last_1_state)))) then 
                    output_last_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = output_last_1_vld_in) and (ap_const_logic_0 = output_last_1_ack_out) and (ap_const_lv2_3 = output_last_1_state)) or ((ap_const_logic_0 = output_last_1_ack_out) and (ap_const_lv2_1 = output_last_1_state)))) then 
                    output_last_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = output_last_1_vld_in) and (ap_const_lv2_2 = output_last_1_state)) or ((ap_const_logic_1 = output_last_1_ack_out) and (ap_const_lv2_1 = output_last_1_state)) or ((ap_const_lv2_3 = output_last_1_state) and not(((ap_const_logic_1 = output_last_1_vld_in) and (ap_const_logic_0 = output_last_1_ack_out))) and not(((ap_const_logic_0 = output_last_1_vld_in) and (ap_const_logic_1 = output_last_1_ack_out)))))) then 
                    output_last_1_state <= ap_const_lv2_3;
                else 
                    output_last_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    col3_reg_328_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state53) and (output_data_1_ack_in = ap_const_logic_1))) then 
                col3_reg_328 <= col_2_reg_908;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state23) and (ap_const_lv1_0 = exitcond1_fu_683_p2))) then 
                col3_reg_328 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    col_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (input_image_data_0_vld_out = ap_const_logic_1))) then 
                col_reg_213 <= col_1_reg_764;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond9_fu_397_p2))) then 
                col_reg_213 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    input_col_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                input_col_reg_248 <= input_col_1_reg_813;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = exitcond6_fu_504_p2))) then 
                input_col_reg_248 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    input_row_reg_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = exitcond5_fu_530_p2))) then 
                input_row_reg_236 <= input_row_1_reg_800;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                input_row_reg_236 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    kernel1_reg_306_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond7_fu_471_p2))) then 
                kernel1_reg_306 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state23) and (ap_const_lv1_1 = exitcond1_fu_683_p2))) then 
                kernel1_reg_306 <= kernel_2_reg_872;
            end if; 
        end if;
    end process;

    kernel_col_reg_283_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond4_fu_542_p2))) then 
                kernel_col_reg_283 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                kernel_col_reg_283 <= kernel_col_1_reg_839;
            end if; 
        end if;
    end process;

    kernel_reg_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond9_fu_397_p2))) then 
                kernel_reg_224 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond6_fu_504_p2))) then 
                kernel_reg_224 <= kernel_1_reg_777;
            end if; 
        end if;
    end process;

    kernel_row_reg_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = exitcond3_fu_570_p2))) then 
                kernel_row_reg_260 <= kernel_row_1_reg_821;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond5_fu_530_p2))) then 
                kernel_row_reg_260 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    row2_reg_317_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and not(((ap_const_logic_0 = output_data_1_ack_in) or (ap_const_logic_0 = output_last_1_ack_in))) and (ap_const_lv1_0 = exitcond2_fu_644_p2))) then 
                row2_reg_317 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state24) and (ap_const_lv1_1 = exitcond_fu_715_p2))) then 
                row2_reg_317 <= row_2_reg_890;
            end if; 
        end if;
    end process;

    row_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = exitcond8_fu_423_p2))) then 
                row_reg_202 <= row_1_reg_751;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                row_reg_202 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    temp_1_reg_294_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond4_fu_542_p2))) then 
                temp_1_reg_294 <= temp_reg_271;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                temp_1_reg_294 <= grp_fu_348_p2;
            end if; 
        end if;
    end process;

    temp_reg_271_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = exitcond3_fu_570_p2))) then 
                temp_reg_271 <= temp_1_reg_294;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond5_fu_530_p2))) then 
                temp_reg_271 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                col_1_reg_764 <= col_1_fu_429_p2;
                input_image_bram_add_reg_756 <= tmp_22_cast_fu_418_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                col_2_reg_908 <= col_2_fu_721_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                conv_out_addr_1_reg_805 <= tmp_31_cast_fu_525_p1(6 - 1 downto 0);
                input_col_1_reg_813 <= input_col_1_fu_536_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                conv_out_load_reg_918 <= conv_out_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                filter_b_load_reg_787 <= filter_b_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                filter_w_load_reg_854 <= filter_w_q0;
                input_image_bram_loa_reg_859 <= input_image_bram_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_image_data_0_load_A)) then
                input_image_data_0_payload_A <= input_image_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = input_image_data_0_load_B)) then
                input_image_data_0_payload_B <= input_image_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                input_row_1_reg_800 <= input_row_1_fu_510_p2;
                tmp_27_reg_792 <= tmp_27_fu_498_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                kernel_1_reg_777 <= kernel_1_fu_477_p2;
                tmp_21_cast_reg_769 <= tmp_21_cast_fu_467_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and not(((ap_const_logic_0 = output_data_1_ack_in) or (ap_const_logic_0 = output_last_1_ack_in))))) then
                kernel_2_reg_872 <= kernel_2_fu_650_p2;
                tmp_24_cast_reg_864 <= tmp_24_cast_fu_640_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                kernel_col_1_reg_839 <= kernel_col_1_fu_576_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                kernel_row_1_reg_821 <= kernel_row_1_fu_548_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) and (ap_const_lv1_0 = exitcond_fu_715_p2))) then
                or_cond1_reg_913 <= or_cond1_fu_738_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = output_data_1_load_A)) then
                output_data_1_payload_A <= grp_fu_361_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = output_data_1_load_B)) then
                output_data_1_payload_B <= grp_fu_361_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = output_last_1_load_A)) then
                output_last_1_payload_A <= or_cond1_reg_913(0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = output_last_1_load_B)) then
                output_last_1_payload_B <= or_cond1_reg_913(0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state27))) then
                reg_366 <= grp_fu_356_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state38))) then
                reg_372 <= grp_fu_348_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state42))) then
                reg_379 <= grp_fu_348_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                row_1_reg_751 <= row_1_fu_403_p2;
                    tmp_19_cast_reg_743(4 downto 2) <= tmp_19_cast_fu_393_p1(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                row_2_reg_890 <= row_2_fu_689_p2;
                tmp_30_reg_882 <= tmp_30_fu_677_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state23) and (ap_const_lv1_0 = exitcond1_fu_683_p2))) then
                tmp_32_reg_895 <= tmp_32_fu_695_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond4_fu_542_p2))) then
                tmp_38_reg_831 <= tmp_38_fu_564_p2;
                    tmp_44_cast_reg_826(1) <= tmp_44_cast_fu_560_p1(1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                tmp_i_i_i_reg_923 <= grp_exp_generic_float_s_fu_339_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and not(((ap_const_logic_0 = output_data_1_ack_in) or (ap_const_logic_0 = output_last_1_ack_in))) and (ap_const_lv1_0 = exitcond2_fu_644_p2))) then
                tmp_s_reg_877 <= tmp_s_fu_656_p2;
            end if;
        end if;
    end process;
    tmp_19_cast_reg_743(1 downto 0) <= "00";
    tmp_19_cast_reg_743(5) <= '0';
    tmp_44_cast_reg_826(0) <= '0';
    tmp_44_cast_reg_826(4 downto 2) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, input_image_data_0_vld_out, output_data_1_ack_in, output_last_1_ack_in, ap_CS_fsm_state4, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state5, exitcond7_fu_471_p2, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, exitcond4_fu_542_p2, ap_CS_fsm_state10, exitcond3_fu_570_p2, ap_CS_fsm_state22, exitcond2_fu_644_p2, ap_CS_fsm_state23, exitcond1_fu_683_p2, ap_CS_fsm_state24, exitcond_fu_715_p2, exitcond8_fu_423_p2, exitcond9_fu_397_p2, exitcond6_fu_504_p2, exitcond5_fu_530_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond9_fu_397_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = exitcond8_fu_423_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (input_image_data_0_vld_out = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond7_fu_471_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond6_fu_504_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = exitcond5_fu_530_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond4_fu_542_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = exitcond3_fu_570_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and not(((ap_const_logic_0 = output_data_1_ack_in) or (ap_const_logic_0 = output_last_1_ack_in))) and (ap_const_lv1_1 = exitcond2_fu_644_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state22) and not(((ap_const_logic_0 = output_data_1_ack_in) or (ap_const_logic_0 = output_last_1_ack_in))) and (ap_const_lv1_0 = exitcond2_fu_644_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state23) and (ap_const_lv1_1 = exitcond1_fu_683_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (ap_const_lv1_1 = exitcond_fu_715_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state52) and (output_data_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_state53 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state53) and (output_data_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_NS_fsm_state28 <= ap_NS_fsm(27);

    ap_block_state22_assign_proc : process(output_data_1_ack_in, output_last_1_ack_in)
    begin
                ap_block_state22 <= ((ap_const_logic_0 = output_data_1_ack_in) or (ap_const_logic_0 = output_last_1_ack_in));
    end process;


    ap_done_assign_proc : process(output_data_1_ack_in, output_last_1_ack_in, ap_CS_fsm_state22, exitcond2_fu_644_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) and not(((ap_const_logic_0 = output_data_1_ack_in) or (ap_const_logic_0 = output_last_1_ack_in))) and (ap_const_lv1_1 = exitcond2_fu_644_p2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(output_data_1_ack_in, output_last_1_ack_in, ap_CS_fsm_state22, exitcond2_fu_644_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) and not(((ap_const_logic_0 = output_data_1_ack_in) or (ap_const_logic_0 = output_last_1_ack_in))) and (ap_const_lv1_1 = exitcond2_fu_644_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    col3_cast3_cast_fu_701_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col3_reg_328),7));
    col_1_fu_429_p2 <= std_logic_vector(unsigned(col_reg_213) + unsigned(ap_const_lv3_1));
    col_2_fu_721_p2 <= std_logic_vector(unsigned(col3_reg_328) + unsigned(ap_const_lv2_1));
    col_cast_cast_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_reg_213),6));

    conv_out_address0_assign_proc : process(conv_out_addr_1_reg_805, ap_CS_fsm_state24, ap_CS_fsm_state21, tmp_41_cast_fu_710_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            conv_out_address0 <= tmp_41_cast_fu_710_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            conv_out_address0 <= conv_out_addr_1_reg_805;
        else 
            conv_out_address0 <= "XXXXXX";
        end if; 
    end process;


    conv_out_ce0_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_out_we0_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            conv_out_we0 <= ap_const_logic_1;
        else 
            conv_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_683_p2 <= "1" when (row2_reg_317 = ap_const_lv2_3) else "0";
    exitcond2_fu_644_p2 <= "1" when (kernel1_reg_306 = ap_const_lv3_6) else "0";
    exitcond3_fu_570_p2 <= "1" when (kernel_col_reg_283 = ap_const_lv2_2) else "0";
    exitcond4_fu_542_p2 <= "1" when (kernel_row_reg_260 = ap_const_lv2_2) else "0";
    exitcond5_fu_530_p2 <= "1" when (input_col_reg_248 = ap_const_lv2_3) else "0";
    exitcond6_fu_504_p2 <= "1" when (input_row_reg_236 = ap_const_lv2_3) else "0";
    exitcond7_fu_471_p2 <= "1" when (kernel_reg_224 = ap_const_lv3_6) else "0";
    exitcond8_fu_423_p2 <= "1" when (col_reg_213 = ap_const_lv3_4) else "0";
    exitcond9_fu_397_p2 <= "1" when (row_reg_202 = ap_const_lv3_4) else "0";
    exitcond_fu_715_p2 <= "1" when (col3_reg_328 = ap_const_lv2_3) else "0";
    filter_b_address0 <= kernel_cast_fu_440_p1(3 - 1 downto 0);

    filter_b_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            filter_b_ce0 <= ap_const_logic_1;
        else 
            filter_b_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filter_w_address0 <= sum4_cast_fu_595_p1(5 - 1 downto 0);

    filter_w_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            filter_w_ce0 <= ap_const_logic_1;
        else 
            filter_w_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_exp_generic_float_s_fu_339_ap_start <= ap_reg_grp_exp_generic_float_s_fu_339_ap_start;

    grp_fu_348_p0_assign_proc : process(reg_372, ap_CS_fsm_state9, tmp_i_i_i_reg_923, temp_reg_271, temp_1_reg_294, ap_CS_fsm_state14, ap_CS_fsm_state35, ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_fu_348_p0 <= reg_372;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_348_p0 <= tmp_i_i_i_reg_923;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_348_p0 <= temp_1_reg_294;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_348_p0 <= temp_reg_271;
        else 
            grp_fu_348_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_348_p1_assign_proc : process(reg_366, filter_b_load_reg_787, ap_CS_fsm_state9, ap_CS_fsm_state14, ap_CS_fsm_state35, ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_fu_348_p1 <= ap_const_lv32_C0000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_348_p1 <= ap_const_lv32_3F800000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_348_p1 <= reg_366;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_348_p1 <= filter_b_load_reg_787;
        else 
            grp_fu_348_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_356_p0_assign_proc : process(filter_w_load_reg_854, conv_out_load_reg_918, ap_CS_fsm_state12, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_356_p0 <= conv_out_load_reg_918;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_356_p0 <= filter_w_load_reg_854;
        else 
            grp_fu_356_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_356_p1_assign_proc : process(input_image_bram_loa_reg_859, ap_CS_fsm_state12, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_356_p1 <= ap_const_lv32_40000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_356_p1 <= input_image_bram_loa_reg_859;
        else 
            grp_fu_356_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_361_ce_assign_proc : process(output_data_1_ack_in, ap_CS_fsm_state52, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state52) and (output_data_1_ack_in = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            grp_fu_361_ce <= ap_const_logic_1;
        else 
            grp_fu_361_ce <= ap_const_logic_0;
        end if; 
    end process;

    input_col_1_fu_536_p2 <= std_logic_vector(unsigned(input_col_reg_248) + unsigned(ap_const_lv2_1));
    input_col_cast7_cast_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_col_reg_248),7));

    input_image_TDATA_blk_n_assign_proc : process(input_image_data_0_state, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_image_TDATA_blk_n <= input_image_data_0_state(0);
        else 
            input_image_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    input_image_TREADY <= input_image_last_0_state(1);

    input_image_bram_address0_assign_proc : process(ap_CS_fsm_state4, input_image_bram_add_reg_756, ap_CS_fsm_state10, tmp_42_fu_613_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            input_image_bram_address0 <= tmp_42_fu_613_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_image_bram_address0 <= input_image_bram_add_reg_756;
        else 
            input_image_bram_address0 <= "XXXX";
        end if; 
    end process;


    input_image_bram_ce0_assign_proc : process(input_image_data_0_vld_out, ap_CS_fsm_state4, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (input_image_data_0_vld_out = ap_const_logic_1)))) then 
            input_image_bram_ce0 <= ap_const_logic_1;
        else 
            input_image_bram_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_image_bram_we0_assign_proc : process(input_image_data_0_vld_out, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (input_image_data_0_vld_out = ap_const_logic_1))) then 
            input_image_bram_we0 <= ap_const_logic_1;
        else 
            input_image_bram_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_image_data_0_ack_in <= input_image_data_0_state(1);

    input_image_data_0_ack_out_assign_proc : process(input_image_data_0_vld_out, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (input_image_data_0_vld_out = ap_const_logic_1))) then 
            input_image_data_0_ack_out <= ap_const_logic_1;
        else 
            input_image_data_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    input_image_data_0_data_out_assign_proc : process(input_image_data_0_payload_A, input_image_data_0_payload_B, input_image_data_0_sel)
    begin
        if ((ap_const_logic_1 = input_image_data_0_sel)) then 
            input_image_data_0_data_out <= input_image_data_0_payload_B;
        else 
            input_image_data_0_data_out <= input_image_data_0_payload_A;
        end if; 
    end process;

    input_image_data_0_load_A <= (input_image_data_0_state_cmp_full and not(input_image_data_0_sel_wr));
    input_image_data_0_load_B <= (input_image_data_0_sel_wr and input_image_data_0_state_cmp_full);
    input_image_data_0_sel <= input_image_data_0_sel_rd;
    input_image_data_0_state_cmp_full <= '0' when (input_image_data_0_state = ap_const_lv2_1) else '1';
    input_image_data_0_vld_in <= input_image_TVALID;
    input_image_data_0_vld_out <= input_image_data_0_state(0);

    input_image_last_0_ack_out_assign_proc : process(input_image_data_0_vld_out, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (input_image_data_0_vld_out = ap_const_logic_1))) then 
            input_image_last_0_ack_out <= ap_const_logic_1;
        else 
            input_image_last_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    input_image_last_0_vld_in <= input_image_TVALID;
    input_row_1_fu_510_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(input_row_reg_236));
    input_row_cast8_cast_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_row_reg_236),7));
    kernel1_cast5_cast_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kernel1_reg_306),6));
    kernel_1_fu_477_p2 <= std_logic_vector(unsigned(kernel_reg_224) + unsigned(ap_const_lv3_1));
    kernel_2_fu_650_p2 <= std_logic_vector(unsigned(kernel1_reg_306) + unsigned(ap_const_lv3_1));
    kernel_cast_cast_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kernel_reg_224),6));
    kernel_cast_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kernel_reg_224),32));
    kernel_col_1_fu_576_p2 <= std_logic_vector(unsigned(kernel_col_reg_283) + unsigned(ap_const_lv2_1));
    kernel_row_1_fu_548_p2 <= std_logic_vector(unsigned(kernel_row_reg_260) + unsigned(ap_const_lv2_1));
    or_cond1_fu_738_p2 <= (tmp2_fu_733_p2 and tmp_s_reg_877);
    output_data_1_ack_in <= output_data_1_state(1);
    output_data_1_ack_out <= output_r_TREADY;

    output_data_1_data_out_assign_proc : process(output_data_1_payload_A, output_data_1_payload_B, output_data_1_sel)
    begin
        if ((ap_const_logic_1 = output_data_1_sel)) then 
            output_data_1_data_out <= output_data_1_payload_B;
        else 
            output_data_1_data_out <= output_data_1_payload_A;
        end if; 
    end process;

    output_data_1_load_A <= (output_data_1_state_cmp_full and not(output_data_1_sel_wr));
    output_data_1_load_B <= (output_data_1_sel_wr and output_data_1_state_cmp_full);
    output_data_1_sel <= output_data_1_sel_rd;
    output_data_1_state_cmp_full <= '0' when (output_data_1_state = ap_const_lv2_1) else '1';

    output_data_1_vld_in_assign_proc : process(output_data_1_ack_in, ap_CS_fsm_state52)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state52) and (output_data_1_ack_in = ap_const_logic_1))) then 
            output_data_1_vld_in <= ap_const_logic_1;
        else 
            output_data_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    output_data_1_vld_out <= output_data_1_state(0);
    output_last_1_ack_in <= output_last_1_state(1);
    output_last_1_ack_out <= output_r_TREADY;

    output_last_1_data_out_assign_proc : process(output_last_1_payload_A, output_last_1_payload_B, output_last_1_sel)
    begin
        if ((ap_const_logic_1 = output_last_1_sel)) then 
            output_last_1_data_out <= output_last_1_payload_B;
        else 
            output_last_1_data_out <= output_last_1_payload_A;
        end if; 
    end process;

    output_last_1_load_A <= (output_last_1_state_cmp_full and not(output_last_1_sel_wr));
    output_last_1_load_B <= (output_last_1_sel_wr and output_last_1_state_cmp_full);
    output_last_1_sel <= output_last_1_sel_rd;
    output_last_1_state_cmp_full <= '0' when (output_last_1_state = ap_const_lv2_1) else '1';

    output_last_1_vld_in_assign_proc : process(output_data_1_ack_in, ap_CS_fsm_state52)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state52) and (output_data_1_ack_in = ap_const_logic_1))) then 
            output_last_1_vld_in <= ap_const_logic_1;
        else 
            output_last_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    output_last_1_vld_out <= output_last_1_state(0);
    output_r_TDATA <= output_data_1_data_out;

    output_r_TDATA_blk_n_assign_proc : process(output_data_1_state, ap_CS_fsm_state52, ap_CS_fsm_state53)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            output_r_TDATA_blk_n <= output_data_1_state(1);
        else 
            output_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_r_TLAST <= output_last_1_data_out;
    output_r_TVALID <= output_last_1_state(0);
    p_shl2_cast_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_fu_622_p3),6));
    p_shl_cast_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_449_p3),6));
    row2_cast4_cast_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row2_reg_317),7));
    row_1_fu_403_p2 <= std_logic_vector(unsigned(row_reg_202) + unsigned(ap_const_lv3_1));
    row_2_fu_689_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(row2_reg_317));
    sum4_cast_fu_595_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum4_fu_590_p2),32));
    sum4_fu_590_p2 <= std_logic_vector(unsigned(tmp1_fu_582_p3) + unsigned(tmp_44_cast_reg_826));
    tmp1_fu_582_p3 <= (kernel_reg_224 & kernel_col_reg_283);
    tmp2_fu_733_p2 <= (tmp_35_fu_727_p2 and tmp_32_reg_895);
    tmp_19_cast_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_385_p3),6));
    tmp_20_fu_449_p3 <= (kernel_reg_224 & ap_const_lv2_0);
        tmp_21_cast_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_21_fu_461_p2),7));

    tmp_21_fu_461_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_457_p1) - unsigned(kernel_cast_cast_fu_445_p1));
    tmp_22_cast_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_413_p2),32));
    tmp_22_fu_413_p2 <= std_logic_vector(unsigned(tmp_19_cast_reg_743) + unsigned(col_cast_cast_fu_409_p1));
    tmp_23_fu_622_p3 <= (kernel1_reg_306 & ap_const_lv2_0);
        tmp_24_cast_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_24_fu_634_p2),7));

    tmp_24_fu_634_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_630_p1) - unsigned(kernel1_cast5_cast_fu_618_p1));
    tmp_25_fu_487_p2 <= std_logic_vector(unsigned(input_row_cast8_cast_fu_483_p1) + unsigned(tmp_21_cast_reg_769));
    tmp_27_fu_498_p2 <= std_logic_vector(unsigned(tmp_45_fu_492_p2) - unsigned(tmp_25_fu_487_p2));
    tmp_28_fu_666_p2 <= std_logic_vector(unsigned(row2_cast4_cast_fu_662_p1) + unsigned(tmp_24_cast_reg_864));
    tmp_30_fu_677_p2 <= std_logic_vector(unsigned(tmp_46_fu_671_p2) - unsigned(tmp_28_fu_666_p2));
    tmp_31_cast_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_fu_520_p2),32));
    tmp_31_fu_520_p2 <= std_logic_vector(unsigned(tmp_27_reg_792) + unsigned(input_col_cast7_cast_fu_516_p1));
    tmp_32_fu_695_p2 <= "1" when (row2_reg_317 = ap_const_lv2_2) else "0";
    tmp_35_fu_727_p2 <= "1" when (col3_reg_328 = ap_const_lv2_2) else "0";
    tmp_37_fu_705_p2 <= std_logic_vector(unsigned(tmp_30_reg_882) + unsigned(col3_cast3_cast_fu_701_p1));
    tmp_38_fu_564_p2 <= std_logic_vector(unsigned(kernel_row_reg_260) + unsigned(input_row_reg_236));
    tmp_39_fu_600_p2 <= std_logic_vector(unsigned(kernel_col_reg_283) + unsigned(input_col_reg_248));
    tmp_41_cast_fu_710_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_37_fu_705_p2),32));
    tmp_41_fu_606_p3 <= (tmp_38_reg_831 & tmp_39_fu_600_p2);
    tmp_42_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_41_fu_606_p3),32));
    tmp_44_cast_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_47_fu_554_p2),5));
    tmp_45_fu_492_p2 <= std_logic_vector(shift_left(unsigned(tmp_25_fu_487_p2),to_integer(unsigned('0' & ap_const_lv7_2(7-1 downto 0)))));
    tmp_46_fu_671_p2 <= std_logic_vector(shift_left(unsigned(tmp_28_fu_666_p2),to_integer(unsigned('0' & ap_const_lv7_2(7-1 downto 0)))));
    tmp_47_fu_554_p2 <= std_logic_vector(shift_left(unsigned(kernel_row_reg_260),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    tmp_fu_385_p3 <= (row_reg_202 & ap_const_lv2_0);
    tmp_s_fu_656_p2 <= "1" when (kernel1_reg_306 = ap_const_lv3_5) else "0";
end behav;
